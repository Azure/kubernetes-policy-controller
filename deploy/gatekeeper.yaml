apiVersion: v1
kind: Namespace
metadata:
  name: gatekeeper-system
  labels:
    admission.gatekeeper.sh/ignore: no-self-managing
    control-plane: controller-manager
    gatekeeper.sh/system: "yes"
---
# Source: gatekeeper-operator/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gatekeeper-operator
  namespace: gatekeeper-system
  labels:
    app.kubernetes.io/name: gatekeeper-operator
    app.kubernetes.io/instance: gatekeeper-operator
    app.kubernetes.io/version: "v3.1.0-beta.7"
---
# Source: gatekeeper-operator/templates/webhook-server-cert.yaml
apiVersion: v1
kind: Secret
metadata:
  name: gatekeeper-operator-webhook-server-cert
  namespace: gatekeeper-system
  labels:
    app.kubernetes.io/name: gatekeeper-operator
    app.kubernetes.io/instance: gatekeeper-operator
    app.kubernetes.io/version: "v3.1.0-beta.7"
    gatekeeper.sh/system: "yes"
---
# Source: gatekeeper-operator/templates/crds.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.4
  creationTimestamp: null
  labels:
    gatekeeper.sh/system: "yes"
  name: configs.config.gatekeeper.sh
spec:
  group: config.gatekeeper.sh
  names:
    kind: Config
    listKind: ConfigList
    plural: configs
    singular: config
  scope: Namespaced
  validation:
    openAPIV3Schema:
      description: Config is the Schema for the configs API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: ConfigSpec defines the desired state of Config
          properties:
            sync:
              description: Configuration for syncing k8s objects
              properties:
                syncOnly:
                  description: If non-empty, only entries on this list will be replicated
                    into OPA
                  items:
                    properties:
                      group:
                        type: string
                      kind:
                        type: string
                      version:
                        type: string
                    type: object
                  type: array
              type: object
            validation:
              description: Configuration for validation
              properties:
                traces:
                  description: List of requests to trace. Both "user" and "kinds"
                    must be specified
                  items:
                    properties:
                      dump:
                        description: Also dump the state of OPA with the trace. Set
                          to `All` to dump everything.
                        type: string
                      kind:
                        description: Only trace requests of the following GroupVersionKind
                        properties:
                          group:
                            type: string
                          kind:
                            type: string
                          version:
                            type: string
                        type: object
                      user:
                        description: Only trace requests from the specified user
                        type: string
                    type: object
                  type: array
              type: object
          type: object
        status:
          description: ConfigStatus defines the observed state of Config
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: gatekeeper-operator/templates/crds.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    controller-tools.k8s.io: "1.0"
  name: constrainttemplates.templates.gatekeeper.sh
spec:
  group: templates.gatekeeper.sh
  names:
    kind: ConstraintTemplate
    plural: constrainttemplates
  scope: Cluster
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          properties:
            crd:
              properties:
                spec:
                  properties:
                    names:
                      properties:
                        kind:
                          type: string
                        shortNames:
                          items:
                            type: string
                          type: array
                      type: object
                    validation:
                      type: object
                  type: object
              type: object
            targets:
              items:
                properties:
                  libs:
                    items:
                      type: string
                    type: array
                  rego:
                    type: string
                  target:
                    type: string
                type: object
              type: array
          type: object
        status:
          properties:
            byPod:
              items:
                properties:
                  errors:
                    items:
                      properties:
                        code:
                          type: string
                        location:
                          type: string
                        message:
                          type: string
                      required:
                      - code
                      - message
                      type: object
                    type: array
                  id:
                    description: a unique identifier for the pod that wrote the status
                    type: string
                  observedGeneration:
                    format: int64
                    type: integer
                type: object
              type: array
            created:
              type: boolean
          type: object
  version: v1beta1
  versions:
  - name: v1beta1
    served: true
    storage: true
  - name: v1alpha1
    served: true
    storage: false
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: gatekeeper-operator/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: gatekeeper-operator
  labels:
    app.kubernetes.io/name: gatekeeper-operator
    app.kubernetes.io/instance: gatekeeper-operator
    app.kubernetes.io/version: "v3.1.0-beta.7"
    gatekeeper.sh/system: "yes"
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - config.gatekeeper.sh
  resources:
  - configs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - config.gatekeeper.sh
  resources:
  - configs/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - constraints.gatekeeper.sh
  resources:
  - '*'
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - templates.gatekeeper.sh
  resources:
  - constrainttemplates
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - templates.gatekeeper.sh
  resources:
  - constrainttemplates/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - admissionregistration.k8s.io
  resourceNames:
  - gatekeeper-validating-webhook-configuration
  resources:
  - validatingwebhookconfigurations
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
---
# Source: gatekeeper-operator/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: gatekeeper-operator
  labels:
    app.kubernetes.io/name: gatekeeper-operator
    app.kubernetes.io/instance: gatekeeper-operator
    app.kubernetes.io/version: "v3.1.0-beta.7"
    gatekeeper.sh/system: "yes"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gatekeeper-operator
subjects:
- kind: ServiceAccount
  name: gatekeeper-operator
  namespace: gatekeeper-system
---
# Source: gatekeeper-operator/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: gatekeeper-operator
  namespace: gatekeeper-system
  labels:
    app.kubernetes.io/name: gatekeeper-operator
    app.kubernetes.io/instance: gatekeeper-operator
    app.kubernetes.io/version: "v3.1.0-beta.7"
    gatekeeper.sh/system: "yes"
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
---
# Source: gatekeeper-operator/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gatekeeper-operator
  namespace: gatekeeper-system
  labels:
    app.kubernetes.io/name: gatekeeper-operator
    app.kubernetes.io/instance: gatekeeper-operator
    app.kubernetes.io/version: "v3.1.0-beta.7"
    gatekeeper.sh/system: "yes"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gatekeeper-operator
subjects:
- kind: ServiceAccount
  name: gatekeeper-operator
  namespace: gatekeeper-system
---
# Source: gatekeeper-operator/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gatekeeper-operator-webhook
  namespace: gatekeeper-system
  labels:
    app.kubernetes.io/name: gatekeeper-operator
    app.kubernetes.io/instance: gatekeeper-operator
    app.kubernetes.io/version: "v3.1.0-beta.7"
    gatekeeper.sh/system: "yes"
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: webhook
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: gatekeeper-operator
    app.kubernetes.io/instance: gatekeeper-operator
    control-plane: controller-manager
    gatekeeper.sh/system: "yes"
---
# Source: gatekeeper-operator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gatekeeper-operator
  namespace: gatekeeper-system
  labels:
    app.kubernetes.io/name: gatekeeper-operator
    app.kubernetes.io/instance: gatekeeper-operator
    app.kubernetes.io/version: "v3.1.0-beta.7"
    control-plane: controller-manager
    gatekeeper.sh/system: "yes"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gatekeeper-operator
      app.kubernetes.io/instance: gatekeeper-operator
      control-plane: controller-manager
      gatekeeper.sh/system: "yes"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gatekeeper-operator
        app.kubernetes.io/instance: gatekeeper-operator
        control-plane: controller-manager
        gatekeeper.sh/system: "yes"
    spec:
      serviceAccountName: gatekeeper-operator
      terminationGracePeriodSeconds: 60
      securityContext:
        {}
      containers:
        - name: gatekeeper-operator
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 999
            runAsNonRoot: true
            runAsUser: 1000
          image: "quay.io/open-policy-agent/gatekeeper:v3.1.0-beta.7"
          imagePullPolicy: IfNotPresent
          args:
          - --audit-interval=60
          - --port=8443
          - --logtostderr
          - --constraint-violations-limit=20
          - --audit-from-cache=false
          - --exempt-namespace=gatekeeper-system
          command:
          - /manager
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          ports:
          - name: webhook
            containerPort: 8443
            protocol: TCP
          - name: metrics 
            containerPort: 8888
            protocol: TCP
          - name: healthz 
            containerPort: 9090
            protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: healthz
          readinessProbe:
            httpGet:
              path: /readyz
              port: healthz
          volumeMounts:
          - mountPath: /certs
            name: cert
            readOnly: true
          resources:
            limits:
              cpu: 1000m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: gatekeeper-operator-webhook-server-cert
---
# Source: gatekeeper-operator/templates/validating-webhook-configuration.yaml
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  labels:
    app.kubernetes.io/name: gatekeeper-operator
    app.kubernetes.io/instance: gatekeeper-operator
    app.kubernetes.io/version: "v3.1.0-beta.7"
    gatekeeper.sh/system: "yes"
  name: gatekeeper-operator-validating-webhook-configuration
webhooks:
- clientConfig:
    caBundle: Cg==
    service:
      name: gatekeeper-operator-webhook
      namespace: gatekeeper-system
      path: /v1/admit
  failurePolicy: Ignore
  name: validation.gatekeeper.sh
  namespaceSelector:
    matchExpressions:
    - key: control-plane
      operator: DoesNotExist
    - key: admission.gatekeeper.sh/ignore
      operator: DoesNotExist
  rules:
  - apiGroups:
    - '*'
    apiVersions:
    - '*'
    operations:
    - CREATE
    - UPDATE
    resources:
    - '*'
  sideEffects: None
  timeoutSeconds: 5
- clientConfig:
    caBundle: Cg==
    service:
      name: gatekeeper-operator-webhook
      namespace: gatekeeper-system
      path: /v1/admitlabel
  failurePolicy: Fail
  name: check-ignore-label.gatekeeper.sh
  rules:
  - apiGroups:
    - ""
    apiVersions:
    - '*'
    operations:
    - CREATE
    - UPDATE
    resources:
    - namespaces
  sideEffects: None
  timeoutSeconds: 5
