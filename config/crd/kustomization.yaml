# This kustomization.yaml is not intended to be run by itself,
# since it depends on service name and namespace that are out of this kustomize package.
# It should be run by config/default
resources:
- bases/config.gatekeeper.sh_configs.yaml
- bases/status.gatekeeper.sh_constraintpodstatuses.yaml
- bases/status.gatekeeper.sh_constrainttemplatepodstatuses.yaml
# - bases/status.gatekeeper.sh_mutatorpodstatuses.yaml
# +kubebuilder:scaffold:crdkustomizeresource

# TODO: once mutation is deployed by default and not by config/ovelays/mutation, 
# add the mutation crds to resources:
#- bases/mutations.gatekeeper.sh_assigns.yaml  
#- bases/mutations.gatekeeper.sh_assignmetadata.yaml

bases:
- ../../vendor/github.com/open-policy-agent/frameworks/constraint/deploy

patches:
- target:
    group: apiextensions.k8s.io
    version: v1
    kind: CustomResourceDefinition
  path: patches/preserve_unknown_fields_false.yaml

patchesJson6902:
# While it usually makes sense to add this kind of pattern validation via a kubebuilder tag in the
# CRD golang source, that didn't work well for this use case.  The pattern annotation requires that
# the field it is applied to be a string.  The excludedNamespaces field is of type []string.  Using
# the annotation thus required using a custom string type.  The complexity of this rippled out of
# config_types.go, as other packages built maps from the excludedNamespaces contained in the CRD
# struct.  This complexity wasn't worth the simplicity of the annotation, and thus kustomize
# provided a simpler solution.  This solution must be duplicated if a second config CRD version is
# added, but for now the tradeoff is a good one.
- target:
    group: apiextensions.k8s.io
    version: v1
    kind: CustomResourceDefinition
    name: configs.config.gatekeeper.sh
  path: patches/wildcard_namespace_pattern.yaml

patchesStrategicMerge:
#- patches/max_name_size_for_assign.yaml
#- patches/max_name_size_for_assignmetadata.yaml
# [WEBHOOK] To enable webhook, uncomment all the sections with [WEBHOOK] prefix.
# patches here are for enabling the conversion webhook for each CRD
#- patches/webhook_in_configs.yaml
#- patches/webhook_in_constraintpodstatuses.yaml
#- patches/webhook_in_constrainttemplatepodstatuses.yaml
#- patches/webhook_in_assignmetadata.yaml
#- patches/webhook_in_assign.yaml
# +kubebuilder:scaffold:crdkustomizewebhookpatch

# [CERTMANAGER] To enable webhook, uncomment all the sections with [CERTMANAGER] prefix.
# patches here are for enabling the CA injection for each CRD
#- patches/cainjection_in_configs.yaml
#- patches/cainjection_in_constraintpodstatuses.yaml
#- patches/cainjection_in_constrainttemplatepodstatuses.yaml
#- patches/cainjection_in_assignmetadata.yaml
#- patches/cainjection_in_assign.yaml
# +kubebuilder:scaffold:crdkustomizecainjectionpatch

# the following config is for teaching kustomize how to do kustomization for CRDs.
configurations:
- kustomizeconfig.yaml
